{"version":3,"sources":["pages/home/index.tsx","components/film-scroll-text/index.tsx","components/main-title/index.tsx","components/favorites-button/index.tsx","components/page-link/index.tsx","components/card/index.tsx","components/loader/index.tsx","pages/people/index.tsx","pages/planets/index.tsx","pages/vehicles/index.tsx","pages/favorites/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","src","alt","FilmScrollText","useState","data","setData","useEffect","fetch","Math","floor","random","then","response","json","catch","error","console","className","opening_crawl","title","release_date","MainTitle","to","FavoritesButton","favoriteNumber","setFavoriteNumber","listener","favs","JSON","parse","localStorage","items","Object","keys","length","window","addEventListener","removeEventListener","PageLink","props","activeClassName","Card","setFavs","favClass","url","handleClick","newFavs","setItem","stringify","dispatchEvent","StorageEvent","key","onClick","click","homeworld","species","terrain","language","population","climate","model","class","passengers","residentList","map","resident","index","Loader","People","results","fetchAdditional","people","forEach","person","homeworld_name","name","species_name","Planets","planets","planet","residents","push","Vehicles","log","vehicle","vehicle_class","Favorites","App","Container","Row","Col","xs","md","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbc0111e.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Home: React.FC = () => {\n\n  return (\n    <img src=\"./unsplash-stormtroopers.jpg\" alt=\"a line of stormtroopers\"/>\n  )\n}\n","import React, { useState, useEffect} from 'react';\n\nimport './styles.css';\n\nexport const FilmScrollText: React.FC = () => {\n  const [data, setData] = useState()\n\n  const randomNumber = () => {\n    return Math.floor(Math.random() * (7 - 1 + 1)) + 1;\n  }\n\n  useEffect( () => {\n    fetch(`https://swapi.co/api/films/${randomNumber()}/`)\n      .then(response => response.json())\n      .then(response => setData(response))\n      .catch(error => console.error(error))\n  }, []);\n\n  return (\n    <>\n      {data ? (\n        <div className = \"wrapper\" >\n          <div className=\"inner-wrapper animated p-2\">\n            <div>\n              <p className=\"text\">{data.opening_crawl}</p>\n              <p className=\"title text-uppercase\">{data.title}</p>\n              <p className=\"subtitle\"> {data.release_date}</p>\n            </div>\n          </div>\n        </div>\n        ) : null } \n     </>\n  )\n}\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nexport const MainTitle: React.FC = () => {\n  return (\n    <Link className=\"text-center page-title\" to=\"/\">\n      SWAPI-Box\n    </Link>\n  )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nexport const FavoritesButton: React.FC = () => {\n  const [favoriteNumber, setFavoriteNumber] = useState(0);\n\n  useEffect(() => {\n    const listener = () => {\n      const favs = JSON.parse(localStorage.items || '{}');\n\n      setFavoriteNumber(Object.keys(favs).length);\n    };\n\n    listener();\n\n    window.addEventListener('storage', listener);\n\n    return () => {\n      window.removeEventListener('storage', listener);\n    }\n  });\n\n  return (\n      <Link className=\"favorites-button\" to=\"/favorites\">\n        <span>View\n        <span> { favoriteNumber } </span>\n        { favoriteNumber === 1 ? 'Favorite' : 'Favorites'}\n        </span>\n      </Link>\n  )\n}\n\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './styles.css';\n\ninterface IPageLinkProps {\n  title: string;\n}\n\nexport const PageLink: React.FC<IPageLinkProps> = (props) => {\n  return (\n    <NavLink\n      activeClassName=\"page-link-active\"\n      className=\"btn btn-primary page-link\"\n      to={`/${props.title}`}>\n        {props.title}\n      </NavLink>   \n  )\n}\n\n","import React, { useState } from 'react';\n\nimport './styles.css';\n\ninterface ICardProps {\n  title: string;\n  homeworld?: string;\n  species?: string;\n  language?: string;\n  population?: string;\n  terrain?: string;\n  climate?: string;\n  model?: string;\n  class?: string;\n  passengers?: number;\n  click?: any;\n  url: string;\n  residentList?: [];\n}\n\nexport const Card: React.FC<ICardProps> = (props) => {\n  const [favs, setFavs] = useState(JSON.parse(localStorage.items || '{}'));\n  const favClass = (favs[props.url]) ? 'active' : null;\n\n  const handleClick = (data: any) => {\n\n    const newFavs: { [key: string]: any } = { ...favs};\n\n    if (newFavs[data.url]) {\n      delete newFavs[data.url];\n    } else {\n      newFavs[data.url] = data;\n    }\n\n    setFavs(() => newFavs);\n\n    localStorage.setItem('items', JSON.stringify(newFavs));\n\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: 'items',\n    }));\n  }\n\n  return (\n    <div\n      className=\"page-card\"\n      onClick={(() => handleClick( props.click ))}\n     >\n      <h2\n        className={`page-card-title ${favClass}`}\n      >\n        { props.title }\n      </h2>\n      \n      <div className=\"p-2\">\n\n        { props.homeworld &&\n          <h3 className=\"page-card-text\">Homeworld: { props.homeworld }</h3>\n        }\n        {props.species &&\n          <h3 className=\"page-card-text\">Species: { props.species }</h3>\n        }\n        {props.terrain &&\n          <h3 className=\"page-card-text\">Terrain: { props.terrain }</h3>\n        }\n        {props.language &&\n          <h3 className=\"page-card-text\">Language: { props.language }</h3>\n        }\n        {props.population &&\n          <h3 className=\"page-card-text\">Population: { props.population }</h3>\n        }\n        {props.climate &&\n          <h3 className=\"page-card-text\">Climate: { props.climate }</h3>\n        }\n        {props.model &&\n          <h3 className=\"page-card-text\">Model: { props.model }</h3>\n        }\n        {props.class &&\n          <h3 className=\"page-card-text\">Class: { props.class }</h3>\n        }\n        {props.passengers &&\n          <h3 className=\"page-card-text\">No. of Passengers: { props.passengers }</h3>\n        }\n\n        {props.residentList &&\n          <h3 className=\"page-card-text\">Residents: <ul> {\n            (props.residentList.length > 0) ? (\n            props.residentList.map((resident, index: number) =>\n                <li key={resident + index}>{resident}</li>\n              )\n            ) : <li>none</li>\n          }\n            </ul>\n          </h3>\n        }\n\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport './styles.css';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"loader\"></div> \n  )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { Card } from '../../components/card';\nimport { Loader } from '../../components/loader';\n\ninterface IPersonProps {\n  name: string;\n  homeworld: string;\n  homeworld_name: string;\n  population: string;\n  species: any;\n  species_name: string;\n  language: string;\n  url: string;\n}\n\ninterface IPersonRequest {\n  homeworld: RequestInfo;\n  homeworld_name: string;\n  population: string;\n  species: RequestInfo;\n  species_name: string;\n  language: string;\n}\n\nexport const People: React.FC<IPersonProps>= () => {\n  const [data, setData] = useState()\n\n  useEffect(() => {\n    fetch(`https://swapi.co/api/people/`)\n      .then(response => response.json())  \n      .then(response => {\n        setData(response.results);\n        fetchAdditional(response.results);\n      })\n      .catch((error) => console.error(error))  \n  }, []);\n\n  const fetchAdditional = (people: any) => {\n    people.forEach((person: IPersonRequest) => {\n      fetch(person.homeworld)\n      .then(response => response.json())\n      .then(response => {\n        person.homeworld_name = response.name;\n        person.population = response.population;\n        setData([...people])\n      })\n      .catch((error) => console.error(error))\n      fetch(person.species)\n        .then(response => response.json())\n        .then(response => {\n          person.species_name = response.name;\n          person.language = response.language;\n          setData([...people])\n      })\n      .catch((error) => console.error(error))\n    }) \n  }\n\n  return (\n    \n    <div className=\"d-flex flex-wrap justify-content-around\">\n        {data ? (     \n        data.map((person: IPersonProps, index: number) =>\n              <Card\n                url={ person.url }\n                key={ index }\n                click={ person }\n                title={ person.name }\n                homeworld={ person.homeworld_name }\n                species={ person.species_name }\n                language={ person.language }\n                population={ person.population }>\n              </Card>\n          )\n        ) : <Loader></Loader> \n      }\n    </div>       \n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card } from '../../components/card';\nimport { Loader } from '../../components/loader';\n\ninterface IPlanetProps {\n  name: string;\n  terrain: string;\n  population: string;\n  climate: string;\n  residentList: [];\n  url: string;\n}\n\nexport const Planets: React.FC<IPlanetProps> = () => {\n  const [data, setData] = useState()\n\n  useEffect(() => {\n    fetch(`https://swapi.co/api/planets/`)\n      .then(response => response.json())\n      .then(response => {\n        setData(response.results)\n        fetchAdditional(response.results)\n      })\n      .catch(error => console.error(error))\n  }, []);\n\n  const fetchAdditional = (planets: any) => {\n    planets.forEach((planet: any) => {      \n      planet.residentList = [];\n      planet.residents.forEach((resident: any) =>{\n          fetch(resident)\n          .then(response => response.json())\n          .then(response => {\n            planet.residentList.push(response.name)\n            setData([...planets])\n          })\n          .catch(error => console.error(error));\n      })\n    });\n  }\n  return (\n    \n      <div className=\"d-flex flex-wrap justify-content-around\">\n        {data ? (\n          data.map((planet: IPlanetProps, index: number) =>\n\n              <Card\n                click={ planet }\n                title={ planet.name }\n                key={ index }\n                terrain={ planet.terrain }\n                population={ planet.population }\n                climate={ planet.climate }\n                url={ planet.url }\n                residentList={ planet.residentList }\n              >\n              </Card>\n          )\n        ) : <Loader></Loader>\n      }\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card } from '../../components/card';\nimport { Loader } from '../../components/loader';\n\ninterface IVehicleProps {\n  name: string;\n  model: string;\n  vehicle_class: string;\n  passengers: number;\n  url: string;\n}\n\nexport const Vehicles: React.FC<IVehicleProps> = () => {\n  const [data, setData] = useState()\n\n  useEffect(() => {\n    fetch(`https://swapi.co/api/vehicles/`)\n      .then(response => response.json())\n      .then(response => setData(response.results))\n      .catch(error => console.log(error))\n  }, []);\n\n  return (\n      <div className=\"d-flex flex-wrap justify-content-around\">\n        {data ? (\n          data.map((vehicle: IVehicleProps, index: number) =>\n          <Card\n            url={ vehicle.url }\n            click={ vehicle }\n            title={ vehicle.name }\n            key={ index }\n            model={ vehicle.model }  \n            class={ vehicle.vehicle_class }\n            passengers={ vehicle.passengers }\n          >\n          </Card>\n          )\n        ) : <Loader></Loader>\n      }\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport { Card } from '../../components/card';\n\ninterface IDataProps {\n  name: string;\n  homeworld?: string;\n  homeworld_name?: string;\n  population?: string;\n  species?: any;\n  species_name?: string;\n  language?: string;\n  url: string;\n  model?: string;\n  passengers?: number;\n  vehicle_class?: string;\n  terrain?: string;\n  climate?: string;\n}\n\nexport const Favorites: React.FC<IDataProps> = () => {\n  const [favs] = useState(JSON.parse(localStorage.items || '{}'));\n\n  return (\n\n    <div className=\"d-flex flex-wrap justify-content-around\">\n\n      {Object.keys(favs).map(key => favs[key]).map((data: IDataProps, index: number) => (\n         \n         <Card\n            click={ data }\n            key={ index }\n            title={ data.name }\n            url={ data.url }\n            homeworld={ data.homeworld_name}\n            species={ data.species_name}\n            language={ data.language}\n            population={ data.population}\n            model={ data.model }\n            class={data.vehicle_class}\n            passengers={data.passengers}\n            terrain={data.terrain}\n            climate={data.climate}\n          >\n          </Card>\n        )\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./pages/home/index\"\n\nimport { Container } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\n\nimport { FilmScrollText } from './components/film-scroll-text';\nimport { MainTitle } from './components/main-title';\nimport { FavoritesButton } from './components/favorites-button';\nimport { PageLink } from './components/page-link';\n\nimport './App.css';\nimport { People } from './pages/people';\nimport { Planets } from './pages/planets';\nimport { Vehicles } from './pages/vehicles';\nimport { Favorites } from './pages/favorites';\n\nconst App: React.FC = () => {\n\n  return (\n    <Container className=\"my-5\">\n      <Row>\n        <Col xs={12} md={4}>\n          <FilmScrollText />\n        </Col>\n        <Col xs={12} md={8}>\n\n          <div className=\"d-flex align-items-center justify-content-center flex-column\">\n            <MainTitle />\n            <FavoritesButton />\n          </div>\n\n          <div className=\"d-flex justify-content-around mb-3 mt-5 button-wrapper\">\n            <PageLink title={ 'people' } />\n            <PageLink title={ 'planets' } />\n            <PageLink title={ 'vehicles' } />\n          </div>\n         \n          <Switch>\n            <Route path=\"/\" exact component={ Home } />\n            <Route path=\"/people\" exact component={ People } />\n            <Route path=\"/planets\" exact component={ Planets } />\n            <Route path=\"/vehicles\" exact component={ Vehicles } />\n            <Route path=\"/favorites\" exact component={ Favorites }/>\n            <Route component={ Home } />\n          </Switch>\n        </Col>\n      </Row>\n    </Container>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}